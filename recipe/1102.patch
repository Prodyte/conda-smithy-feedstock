diff --git a/conda_smithy/lint_recipe.py b/conda_smithy/lint_recipe.py
index fa6ecb6..5d2c299 100644
--- a/conda_smithy/lint_recipe.py
+++ b/conda_smithy/lint_recipe.py
@@ -275,13 +275,6 @@ def lintify(meta, recipe_dir=None, conda_forge=False):
     except RuntimeError as e:
         lints.append(str(e))
 
-    # 12a: License family must be valid (conda-build checks for that)
-    license_family = about_section.get("license_family", license).lower()
-    license_file = about_section.get("license_file", "")
-    needed_families = ["gpl", "bsd", "mit", "apache", "psf"]
-    if license_file == "" and any(f for f in needed_families if f in license_family):
-        lints.append("license_file entry is missing, but is required.")
-
     # 13: Check that the recipe name is valid
     recipe_name = package_section.get("name", "").strip()
     if re.match("^[a-z0-9_\-.]+$", recipe_name) is None:
@@ -436,6 +429,13 @@ def lintify(meta, recipe_dir=None, conda_forge=False):
                     "See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-builds"
                 )
 
+    # 3: License should be packaged
+    license_family = about_section.get("license_family", license).lower()
+    license_file = about_section.get("license_file", "")
+    needed_families = ["gpl", "bsd", "mit", "apache", "psf"]
+    if license_file == "" and any(f for f in needed_families if f in license_family):
+        hints.append("license_file entry is missing, but is expected.")
+
     return lints, hints
 
 
diff --git a/news/license.rst b/news/license.rst
index dd08cdf..7a5ba95 100644
--- a/news/license.rst
+++ b/news/license.rst
@@ -1,6 +1,6 @@
 **Added:**
 
-* license_file is required for GPL, MIT, BSD, APACHE, PSF
+* license_file is hinted for GPL, MIT, BSD, APACHE, PSF
 
 **Fixed:**
 
diff --git a/tests/test_lint_recipe.py b/tests/test_lint_recipe.py
index d2aacbc..abce3ba 100644
--- a/tests/test_lint_recipe.py
+++ b/tests/test_lint_recipe.py
@@ -569,7 +569,7 @@ class Test_linter(unittest.TestCase):
         )
         self.assertIn(expected_message, lints)
 
-    def test_license_file_required(self):
+    def test_license_file_present(self):
         meta = {
             "about": {
                 "home": "a URL",
@@ -579,9 +579,10 @@ class Test_linter(unittest.TestCase):
         }
         lints, hints = linter.lintify(meta)
         expected_message = (
-            "license_file entry is missing, but is required."
+            "license_file entry is missing, but is expected."
         )
-        self.assertIn(expected_message, lints)
+        self.assertNotIn(expected_message, lints)
+        self.assertIn(expected_message, hints)
 
     def test_recipe_name(self):
         meta = {"package": {"name": "mp++"}}
